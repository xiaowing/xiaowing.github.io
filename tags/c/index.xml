<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 小wing的驿站</title>
    <link>https://xiaowing.github.io/tags/c/</link>
    <description>Recent content in C on 小wing的驿站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Licensed under CC BY-NC-SA.</copyright>
    <lastBuildDate>Tue, 13 Mar 2018 22:37:10 +0800</lastBuildDate>
    
	<atom:link href="https://xiaowing.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>记一次面向线程栈的防爆栈机制的实现探索</title>
      <link>https://xiaowing.github.io/post/20180313_thread_stack_overflow_protection/</link>
      <pubDate>Tue, 13 Mar 2018 22:37:10 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180313_thread_stack_overflow_protection/</guid>
      <description>&lt;p&gt;爆栈(&lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_overflow&#34;&gt;&lt;em&gt;stack overflow&lt;/em&gt;&lt;/a&gt;), 众所周知是一种软件的致命错误, 一旦发生程序就core了。根据维基百科的描述，当代码中有以下三种情形时会引发爆栈&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无限递归&lt;/li&gt;
&lt;li&gt;函数调用链展开过深&lt;/li&gt;
&lt;li&gt;函数内申请过大的局部变量&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中1.和2.本质上是相同的，不管是否递归，只要函数调用链过深，压栈过多就会引发爆栈。只不过在实践中，由递归更容易引发爆栈。&lt;/p&gt;

&lt;p&gt;可是在很多时候，我们无法避免递归。比如数据库在对SQL语句的执行实现中，伴随着输入的SQL语句的复杂性，间接递归通常是可以预见的。但是无论哪种情况，我们都不能容忍一个用户输入导致程序爆栈，因此这种情况下，我们就需要一个防爆栈机制&lt;/p&gt;

&lt;p&gt;下文通过介绍我经手的一个防爆栈机制的实现过程，分享一下有关程序设计的教训与心得:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>揭秘PG —— 无处不在的OID</title>
      <link>https://xiaowing.github.io/post/20171117_pg_knowhow_oid/</link>
      <pubDate>Fri, 17 Nov 2017 23:08:31 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20171117_pg_knowhow_oid/</guid>
      <description>&lt;p&gt;由于手头当前的工作是基于PostgreSQL(以下简称&lt;strong&gt;PG&lt;/strong&gt;)做二次开发，因此目前对PG的源码也或多或少地读了一些，因此便想到了在博客里分享一些关于阅读PG源码所获得的KnowHow。&lt;/p&gt;

&lt;p&gt;在国内的PG技术圈内，提到PG源码解读自然首推武汉大学的两位彭老师所著的&lt;a href=&#34;https://book.douban.com/subject/6971366/&#34;&gt;《PostgreSQL数据库内核分析》&lt;/a&gt;。不过这本书的着眼点是对PG源码的整体架构，以及SQL引擎，存储系统，事务处理等等这些实现机制&amp;amp;算法的介绍，而我则主要想分享一些PG代码中的一些有意思的小细节/小功能。虽然只是PG那几百万行源码中的沧海一粟，不过从这些小细节中解读程序设计的匠心也是颇有意思的。&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/PostgreSQL_logo_120x120.png&#34;
        alt=&#34;PostgreSQL Logo&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;第一篇就从PG中无处不在的&lt;strong&gt;OID&lt;/strong&gt;开始吧&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>主线程等待子线程结束的各语言实现</title>
      <link>https://xiaowing.github.io/post/20170805_main_thread_sync_with_others/</link>
      <pubDate>Sat, 05 Aug 2017 22:18:06 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20170805_main_thread_sync_with_others/</guid>
      <description>&lt;p&gt;在涉及到并发编程的情况下，经常性地会碰到一种场景:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;由一个线程开启了多个线程并发执行多个任务，之后由该线程(so called &amp;ldquo;主线程&amp;rdquo;)等待多个线程都结束后汇总结果.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这种场景下，主线程在其创建的子线程执行期间内需要阻塞，直到其他子线程都执行完毕。由于这类场景已经在不同语言的开发中遇到多次，所以汇总一下这些语言的常用实现方法，以后查起来也方便~&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>