<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pthread on 小wing的驿站</title>
    <link>https://xiaowing.github.io/tags/pthread/</link>
    <description>Recent content in Pthread on 小wing的驿站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Licensed under CC BY-NC-SA.</copyright>
    <lastBuildDate>Tue, 13 Mar 2018 22:37:10 +0800</lastBuildDate>
    
	<atom:link href="https://xiaowing.github.io/tags/pthread/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>记一次面向线程栈的防爆栈机制的实现探索</title>
      <link>https://xiaowing.github.io/post/20180313_thread_stack_overflow_protection/</link>
      <pubDate>Tue, 13 Mar 2018 22:37:10 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180313_thread_stack_overflow_protection/</guid>
      <description>&lt;p&gt;爆栈(&lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_overflow&#34;&gt;&lt;em&gt;stack overflow&lt;/em&gt;&lt;/a&gt;), 众所周知是一种软件的致命错误, 一旦发生程序就core了。根据维基百科的描述，当代码中有以下三种情形时会引发爆栈&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无限递归&lt;/li&gt;
&lt;li&gt;函数调用链展开过深&lt;/li&gt;
&lt;li&gt;函数内申请过大的局部变量&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中1.和2.本质上是相同的，不管是否递归，只要函数调用链过深，压栈过多就会引发爆栈。只不过在实践中，由递归更容易引发爆栈。&lt;/p&gt;

&lt;p&gt;可是在很多时候，我们无法避免递归。比如数据库在对SQL语句的执行实现中，伴随着输入的SQL语句的复杂性，间接递归通常是可以预见的。但是无论哪种情况，我们都不能容忍一个用户输入导致程序爆栈，因此这种情况下，我们就需要一个防爆栈机制&lt;/p&gt;

&lt;p&gt;下文通过介绍我经手的一个防爆栈机制的实现过程，分享一下有关程序设计的教训与心得:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>