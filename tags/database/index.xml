<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小wing的驿站</title>
    <link>https://xiaowing.github.io/tags/database/index.xml</link>
    <description>Recent content on 小wing的驿站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Licensed under CC BY-NC-SA.</copyright>
    <atom:link href="https://xiaowing.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>我所理解的事务隔离级别</title>
      <link>https://xiaowing.github.io/post/20180127_db_isolation_level/</link>
      <pubDate>Sat, 27 Jan 2018 21:08:20 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180127_db_isolation_level/</guid>
      <description>&lt;p&gt;我发现有不少做应用的技术人员对于数据库的一些常识概念其实是理解不清的，这就导致了他们设计的应用中往往充斥了数据访问的相关错误却浑然不知。所以其实我还是比较乐意普及一些数据库常识的。&lt;/p&gt;

&lt;p&gt;本文就是我在 &lt;a href=&#34;https://about.segmentfault.com/?utm_source=sf-footer&amp;amp;utm_medium=footer-nav&amp;amp;utm_campaign=about&amp;amp;utm_content=about-index&amp;amp;utm_term=%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC&#34;&gt;&lt;em&gt;segmentfault.com&lt;/em&gt;&lt;/a&gt; 上对 &amp;ldquo;&lt;strong&gt;怎么理解SQL的四个事务隔离级别？&lt;/strong&gt;&amp;ldquo;&lt;a href=&#34;https://segmentfault.com/q/1010000012178278/a-1020000012661683&#34;&gt;这个问题的回答&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;我认为要理解事务隔离级别，就必须先理解在并发事务场景下隔离的重要性。因此，对于并发读事务之间数据可见性的三种现象需要首先理解清楚。&lt;/p&gt;

&lt;p&gt;下面我将以下表为例直观说明这三种现象。&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180127/isolation_level_table.png&#34;
        alt=&#34;示例表&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;h2 id=&#34;并发读的三种现象&#34;&gt;并发读的三种现象&lt;/h2&gt;

&lt;h3 id=&#34;脏读&#34;&gt;脏读&lt;/h3&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180127/isolation_level_dirty_read.png&#34;
        alt=&#34;dirty read&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;这种现象出现在事物间的隔离级别最差的场景下，写事务&lt;strong&gt;对一个元组的更新&lt;/strong&gt;尚未提交时就被另一个事务读到了。如果在一个业务应用中，写事务后面没提交而是回滚了，那么可以预见这个读事务读到的这个未提交的更新在某些业务场景下可能会带来一些困扰。&lt;/p&gt;

&lt;h3 id=&#34;不可重复读&#34;&gt;不可重复读&lt;/h3&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180127/isolation_level_unrepeatable_read.png&#34;
        alt=&#34;unrepeatable read&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;这种现象比上面的&lt;strong&gt;脏读&lt;/strong&gt;&amp;ldquo;好&amp;rdquo;一点，只有当写事务提交后，这个更新才会被读事务读取到。但是考虑到如上图所示，在同一个事务中的不同时间点意图读取同一个元组却读到了不同的数据，在某些业务场景下可能也会带来一些困扰。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;划重点： &amp;ldquo;脏读&amp;rdquo;和&amp;rdquo;不可重复读&amp;rdquo;这两个现象针对的是对于表中的&lt;strong&gt;同一个逻辑上的元组&lt;/strong&gt;而言.引发&amp;rdquo;脏读&amp;rdquo;和&amp;rdquo;不可重复读&amp;rdquo;这两个现象的写事务的操作通常是&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;幻读&#34;&gt;幻读&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;幻读&lt;/strong&gt;这一现象针对的已不是表中的单一元组而言，而是指读事务在对表中的&lt;strong&gt;某个范围多个元组&lt;/strong&gt;而言的一种现象，引发幻读的写事务对应的操作通常是&lt;strong&gt;INSERT&lt;/strong&gt;或&lt;strong&gt;DELETE&lt;/strong&gt;。如下图所示：&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180127/isolation_level_phantom_read.png&#34;
        alt=&#34;phantom read&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;在同一个读事务中，对于同一个过滤条件查询出了不同的结果集，这在某些业务场景下也有可能带来一定的困扰。&lt;/p&gt;

&lt;h3 id=&#34;补充说明&#34;&gt;补充说明&lt;/h3&gt;

&lt;p&gt;上面这些就是关于&amp;rdquo;脏读&amp;rdquo;，&amp;rdquo;不可重复读&amp;rdquo;以及&amp;rdquo;幻读&amp;rdquo;这三个现象的介绍。除此之外，这边还需要再强调两个注意点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;ldquo;脏读&amp;rdquo;，&amp;rdquo;不可重复读&amp;rdquo;以及&amp;rdquo;幻读&amp;rdquo;这三个现象&lt;strong&gt;不是错误,更不是BUG&lt;/strong&gt;。它们仅仅是事务并发场景下可能出现的现象。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;脏读&amp;rdquo;，&amp;rdquo;不可重复读&amp;rdquo;以及&amp;rdquo;幻读&amp;rdquo;针对的是&lt;strong&gt;同一个事务&lt;/strong&gt;中的读操作而言。为什么要强调这一点，因为有些对数据库理解不深的同学不能很好的理解清楚 &lt;strong&gt;会话&lt;/strong&gt;,&lt;strong&gt;事务&lt;/strong&gt;和&lt;strong&gt;语句&lt;/strong&gt;这三个概念。于是对于以下的例子就会误认为是&amp;rdquo;不可重复读&amp;rdquo;的现象:&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180127/read_exception.jpg&#34;
        alt=&#34;例外&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;但实际上，在这个例子中&lt;strong&gt;会话2&lt;/strong&gt;的SQL是按&lt;strong&gt;隐式事务&lt;/strong&gt;来执行，其执行的两条&lt;code&gt;SELECT name FROM foo WHERE id = 1;&lt;/code&gt;实际上是分属两个不同的读事务。对于后执行的那条SELECT文所属的隐式事务，由于其执行时会话1的更新已经提交，所以它理所当然地可以读到更新后的数据。这与&amp;rdquo;不可重复读&amp;rdquo;的概念没有任何关系。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;如何理解事务隔离级别&#34;&gt;如何理解事务隔离级别&lt;/h2&gt;

&lt;h3 id=&#34;事务隔离级别与上述三现象的关系&#34;&gt;事务隔离级别与上述三现象的关系&lt;/h3&gt;

&lt;p&gt;理解清楚了以上的这三个&amp;rdquo;读&amp;rdquo;的概念后，就可以很容易的理解事务隔离级别了。因为事务隔离级别的设置本质上就意味着让你控制并发事务之间的写事务带来的数据更新的对于同时正在执行的其他事务的可见性——即，&lt;strong&gt;你允许业务中的并发事务之间出现怎样的都现象&lt;/strong&gt;. 由于&amp;rdquo;脏读&amp;rdquo;，&amp;rdquo;不可重复读&amp;rdquo;以及&amp;rdquo;幻读&amp;rdquo;的概念是一种层层递进的概念，因此事务隔离级别从&amp;rdquo;Read Uncommited&amp;rdquo;到&amp;rdquo;Serializable&amp;rdquo;也是一个比一个严格。&lt;/p&gt;

&lt;p&gt;SQL标准中对于隔离级别与事务之间数据可见性的关系定义如下:&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180127/isolation_read.png&#34;
        alt=&#34;读隔离&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;需要注意的是，SQL标准中对于这些隔离级别定义中约束的&amp;rdquo;不允许&amp;rdquo;现象是强制要求的。数据库厂商在宣称支持某个隔离级别时，必须将上表中对应隔离级别的&amp;rdquo;不允许&amp;rdquo;进行实现。但是对于&amp;rdquo;可能&amp;rdquo;项则不代表你必须实现成具备某种都现象。比如在PostgreSQL中，由于其MVCC的实现，&lt;code&gt;REPEATABLE READ&lt;/code&gt;对于读事务的行为实现也和&lt;code&gt;SERIALIZABLE&lt;/code&gt;一样是不会出现幻读的，而&lt;code&gt;REPEATABLE READ&lt;/code&gt;和&lt;code&gt;SERIALIZABLE&lt;/code&gt;的区别，主要体现在下文所述的对更新操作的约束力度上。&lt;/p&gt;

&lt;h3 id=&#34;serializable对写操作的约束&#34;&gt;SERIALIZABLE对写操作的约束&lt;/h3&gt;

&lt;p&gt;在其他隔离级别中，如果并发的两个事务同时意图对同一个元组进行更新时，后更新的事务会等待直到先更新的事务提交后在继续执行其更新操作。 但是在&lt;strong&gt;SERIALIZABLE&lt;/strong&gt;的情况下，由于此时事务隔离级别最强，会对有可能对读一致性带来影响的写操作必须按照事务的串行执行。在PG的实现中，这表现为尝试对于同一元组进行更新的并发事务会在等待完先更新的事务提交后自己报个错：&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180127/write_serializable.jpg&#34;
        alt=&#34;可串行化的写约束&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;在&lt;strong&gt;SERIALIZABLE&lt;/strong&gt;隔离级别下，对于上图中的两个更新事务若都希望成功，需要保证右边会话的更新操作所属事务的&lt;code&gt;START TRANSACTION&lt;/code&gt;必须发生在左边会话的更新事务&lt;code&gt;COMMIT&lt;/code&gt;之后，即两个写事务真正是&amp;rdquo;串行&amp;rdquo;的。&lt;/p&gt;

&lt;p&gt;以上就是我对事务隔离级别的认识。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>