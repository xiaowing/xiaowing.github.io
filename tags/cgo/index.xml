<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cgo on 小wing的驿站</title>
    <link>https://xiaowing.github.io/tags/cgo/</link>
    <description>Recent content in Cgo on 小wing的驿站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Licensed under CC BY-NC-SA.</copyright>
    <lastBuildDate>Sun, 13 May 2018 23:02:33 +0800</lastBuildDate>
    
	<atom:link href="https://xiaowing.github.io/tags/cgo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>双剑合璧——当PG的FDW遇上GO(之三)</title>
      <link>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part03/</link>
      <pubDate>Sun, 13 May 2018 23:02:33 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part03/</guid>
      <description>&lt;p&gt;由于对Golang以及PostgreSQL(下文简称&lt;strong&gt;PG&lt;/strong&gt;)的FDW(&lt;em&gt;Foreign Data Wrapper&lt;/em&gt;)两个技术的双重喜爱,因此我利用假期用Golang实现了一个&lt;a href=&#34;https://github.com/xiaowing/douban_fdw&#34;&gt;访问douban API的FDW&lt;/a&gt;. 同时也借此机会总结了一下 PG的FDW技术并分享一下使用Golang实现FDW的一些经验。&lt;/p&gt;

&lt;p&gt;全文索引如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part01/&#34;&gt;第一部分: FDW的前世今生&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part02/&#34;&gt;第二部分: 揭秘FDW&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;第三部分: 如何用Go来实现一个FDW&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>双剑合璧——当PG的FDW遇上GO(之二)</title>
      <link>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part02/</link>
      <pubDate>Sun, 13 May 2018 22:02:33 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part02/</guid>
      <description>&lt;p&gt;由于对Golang以及PostgreSQL(下文简称&lt;strong&gt;PG&lt;/strong&gt;)的FDW(&lt;em&gt;Foreign Data Wrapper&lt;/em&gt;)两个技术的双重喜爱,因此我利用假期用Golang实现了一个&lt;a href=&#34;https://github.com/xiaowing/douban_fdw&#34;&gt;访问douban API的FDW&lt;/a&gt;. 同时也借此机会总结了一下 PG的FDW技术并分享一下使用Golang实现FDW的一些经验。&lt;/p&gt;

&lt;p&gt;全文索引如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part01/&#34;&gt;第一部分: FDW的前世今生&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;第二部分: 揭秘FDW&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part03/&#34;&gt;第三部分: 如何用Go来实现一个FDW&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>双剑合璧——当PG的FDW遇上GO(之一)</title>
      <link>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part01/</link>
      <pubDate>Sun, 13 May 2018 21:02:33 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part01/</guid>
      <description>&lt;p&gt;由于对Golang以及PostgreSQL(下文简称&lt;strong&gt;PG&lt;/strong&gt;)的FDW(&lt;em&gt;Foreign Data Wrapper&lt;/em&gt;)两个技术的双重喜爱, 因此我利用假期用Golang实现了一个&lt;a href=&#34;https://github.com/xiaowing/douban_fdw&#34;&gt;访问douban API的FDW&lt;/a&gt;. 同时也借此机会总结了一下 PG的FDW技术并分享一下使用Golang实现FDW的一些经验。&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180513/fdw_metaphor.jpg&#34;
        alt=&#34;FDW Metaphor&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;全文索引如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第一部分: FDW的前世今生&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part02/&#34;&gt;第二部分: 揭秘FDW&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part03/&#34;&gt;第三部分: 如何用Go来实现一个FDW&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言程序通过函数指针调用Go函数的方法</title>
      <link>https://xiaowing.github.io/post/howto_call_a_go_func_via_funcpoint_from_cside/</link>
      <pubDate>Sun, 30 Jul 2017 16:16:03 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/howto_call_a_go_func_via_funcpoint_from_cside/</guid>
      <description>&lt;p&gt;在github上关于cgo的wiki中，有一&lt;a href=&#34;https://github.com/golang/go/wiki/cgo#function-pointer-callbacks&#34;&gt;章节&lt;/a&gt;专门介绍了如何利用cgo技术通过函数指针调用Golang的函数实现. 不过，仔细观察这个章节的代码示例可以发现，它所要解决的其实是以下的场景:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在Golang中想要调用一个已有的C语言函数，但是该C语言函数要求一个函数指针作为参数时应该怎么办？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果将这个场景稍微改变一下，改成以下场景，对应的解法又该是什么？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在一个C语言实现的已有系统中，对于一个要求函数指针的函数，如何传入一个Golang实现的回调函数以实现“用Golang扩展C语言系统”的目的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我基于wiki中已有的代码简单探索了一下方法，结果分享如下：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>