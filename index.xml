<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小wing的驿站</title>
    <link>https://xiaowing.github.io/</link>
    <description>Recent content on 小wing的驿站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Licensed under CC BY-NC-SA.</copyright>
    <lastBuildDate>Sat, 18 Apr 2020 23:30:00 +0800</lastBuildDate>
    
	<atom:link href="https://xiaowing.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我所怀念的彼时光景</title>
      <link>https://xiaowing.github.io/post/20200418_the_scene_i_miss/</link>
      <pubDate>Sat, 18 Apr 2020 23:30:00 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20200418_the_scene_i_miss/</guid>
      <description>&lt;p&gt;也许是人到了中年就容易开始回忆过去, 随着离不惑之年的越来越近, 我的脑海里逐渐被各种各样的回忆所充塞, 于是反而变得越来越&amp;rdquo;惑&amp;rdquo;. 最近一段时间, 总是会不经意地想起十几年前的一个片段, 其实只是一个很普通的光景, 但不知为何, 近来总是在我的脑海中挥之不散&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个小问题: Golang可执行程序的退出码</title>
      <link>https://xiaowing.github.io/post/20190130_exit_code_of_go_program/</link>
      <pubDate>Wed, 30 Jan 2019 23:50:00 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20190130_exit_code_of_go_program/</guid>
      <description>&lt;p&gt;本周因为工作上的遍历需要, 用Go语言写了一个用于批量文本解析的命令行工具。由于这个工具是要嵌入shell脚本中运行的，所以在写该工具的异常处理时突然意识到一个问题: &lt;strong&gt;Go语言可执行程序的异常退出码该怎么设置？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;于是带着这个非常细节的问题，稍稍调查了一下，结果发现还是有不少东西可说道说道的&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在MacOS Mojave上管中窥豹TimescaleDB</title>
      <link>https://xiaowing.github.io/post/20181231_a_peek_of_timescaledb_on_mojave/</link>
      <pubDate>Mon, 31 Dec 2018 14:19:05 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20181231_a_peek_of_timescaledb_on_mojave/</guid>
      <description>&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-3&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/timescale_logo.png&#34;
        alt=&#34;Logo of TimescaleDB&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;年底换了工作, 因此未来一段时间的工作方向会集中在&lt;a href=&#34;https://en.wikipedia.org/wiki/Time_series_database&#34;&gt;时序数据库&lt;/a&gt;.然后恰逢今年9月,号称第一款基于PostgreSQL的时序数据库 &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_series_database&#34;&gt;TimescaleDB&lt;/a&gt;正式推出了可用于生产环境的1.0版本。于是就赶快先试用了一把&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nokia 7 Plus入手三十日评测</title>
      <link>https://xiaowing.github.io/post/20180715_review_of_nokia_7p/</link>
      <pubDate>Sun, 15 Jul 2018 22:42:33 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180715_review_of_nokia_7p/</guid>
      <description>&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-3&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180715/nokia_7_plus_black.jpg&#34;
        alt=&#34;诺记7Plus官宣图&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;由于之前用的三星Galaxy S6 Edge已经用了30个月+, 所以从今年年初开始就一直考虑换手机。得知了诺基亚会推出7 Plus后便一直挂念，并终于在Release 4个月后的京东618年中大促时下手买了这款手机。用到现在已有30余日，因此来简单做点Review&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译文]厌倦了REST API设计时的gRPC入门</title>
      <link>https://xiaowing.github.io/post/20180603_learning_grpc_when_tired_of_restapi/</link>
      <pubDate>Sun, 03 Jun 2018 23:41:52 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180603_learning_grpc_when_tired_of_restapi/</guid>
      <description>&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-2&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/grpc_logo.png&#34;
        alt=&#34;gRPC Logo&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;我对&lt;a href=&#34;https://blog.csdn.net/qq_16681169/article/details/73442330&#34;&gt;微服务架构&lt;/a&gt;一直都饶有兴趣, 不过由于我目前从事的开发跟这一切半毛钱关系也没有, 所以一直也就只能站在局外人的角度看个热闹. 前端时间在&lt;a href=&#34;https://qiita.com&#34;&gt;Qiita&lt;/a&gt;上看到一篇关于使用&lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt;来开发微服务的文章觉得很有意思, 正好gRPC也是我今年想学的技术, 所以就把这篇文章翻译成了中文&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>双剑合璧——当PG的FDW遇上GO(之三)</title>
      <link>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part03/</link>
      <pubDate>Sun, 13 May 2018 23:02:33 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part03/</guid>
      <description>&lt;p&gt;由于对Golang以及PostgreSQL(下文简称&lt;strong&gt;PG&lt;/strong&gt;)的FDW(&lt;em&gt;Foreign Data Wrapper&lt;/em&gt;)两个技术的双重喜爱,因此我利用假期用Golang实现了一个&lt;a href=&#34;https://github.com/xiaowing/douban_fdw&#34;&gt;访问douban API的FDW&lt;/a&gt;. 同时也借此机会总结了一下 PG的FDW技术并分享一下使用Golang实现FDW的一些经验。&lt;/p&gt;

&lt;p&gt;全文索引如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part01/&#34;&gt;第一部分: FDW的前世今生&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part02/&#34;&gt;第二部分: 揭秘FDW&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;第三部分: 如何用Go来实现一个FDW&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>双剑合璧——当PG的FDW遇上GO(之二)</title>
      <link>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part02/</link>
      <pubDate>Sun, 13 May 2018 22:02:33 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part02/</guid>
      <description>&lt;p&gt;由于对Golang以及PostgreSQL(下文简称&lt;strong&gt;PG&lt;/strong&gt;)的FDW(&lt;em&gt;Foreign Data Wrapper&lt;/em&gt;)两个技术的双重喜爱,因此我利用假期用Golang实现了一个&lt;a href=&#34;https://github.com/xiaowing/douban_fdw&#34;&gt;访问douban API的FDW&lt;/a&gt;. 同时也借此机会总结了一下 PG的FDW技术并分享一下使用Golang实现FDW的一些经验。&lt;/p&gt;

&lt;p&gt;全文索引如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part01/&#34;&gt;第一部分: FDW的前世今生&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;第二部分: 揭秘FDW&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part03/&#34;&gt;第三部分: 如何用Go来实现一个FDW&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>双剑合璧——当PG的FDW遇上GO(之一)</title>
      <link>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part01/</link>
      <pubDate>Sun, 13 May 2018 21:02:33 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part01/</guid>
      <description>&lt;p&gt;由于对Golang以及PostgreSQL(下文简称&lt;strong&gt;PG&lt;/strong&gt;)的FDW(&lt;em&gt;Foreign Data Wrapper&lt;/em&gt;)两个技术的双重喜爱, 因此我利用假期用Golang实现了一个&lt;a href=&#34;https://github.com/xiaowing/douban_fdw&#34;&gt;访问douban API的FDW&lt;/a&gt;. 同时也借此机会总结了一下 PG的FDW技术并分享一下使用Golang实现FDW的一些经验。&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20180513/fdw_metaphor.jpg&#34;
        alt=&#34;FDW Metaphor&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;全文索引如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第一部分: FDW的前世今生&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part02/&#34;&gt;第二部分: 揭秘FDW&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xiaowing.github.io/post/20180513_write_pgfdw_in_golang_part03/&#34;&gt;第三部分: 如何用Go来实现一个FDW&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记一次面向线程栈的防爆栈机制的实现探索</title>
      <link>https://xiaowing.github.io/post/20180313_thread_stack_overflow_protection/</link>
      <pubDate>Tue, 13 Mar 2018 22:37:10 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180313_thread_stack_overflow_protection/</guid>
      <description>&lt;p&gt;爆栈(&lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_overflow&#34;&gt;&lt;em&gt;stack overflow&lt;/em&gt;&lt;/a&gt;), 众所周知是一种软件的致命错误, 一旦发生程序就core了。根据维基百科的描述，当代码中有以下三种情形时会引发爆栈&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无限递归&lt;/li&gt;
&lt;li&gt;函数调用链展开过深&lt;/li&gt;
&lt;li&gt;函数内申请过大的局部变量&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中1.和2.本质上是相同的，不管是否递归，只要函数调用链过深，压栈过多就会引发爆栈。只不过在实践中，由递归更容易引发爆栈。&lt;/p&gt;

&lt;p&gt;可是在很多时候，我们无法避免递归。比如数据库在对SQL语句的执行实现中，伴随着输入的SQL语句的复杂性，间接递归通常是可以预见的。但是无论哪种情况，我们都不能容忍一个用户输入导致程序爆栈，因此这种情况下，我们就需要一个防爆栈机制&lt;/p&gt;

&lt;p&gt;下文通过介绍我经手的一个防爆栈机制的实现过程，分享一下有关程序设计的教训与心得:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我所理解的事务隔离级别</title>
      <link>https://xiaowing.github.io/post/20180127_db_isolation_level/</link>
      <pubDate>Sat, 27 Jan 2018 21:08:20 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20180127_db_isolation_level/</guid>
      <description>&lt;p&gt;我发现有不少做应用的技术人员对于数据库的一些常识概念其实是理解不清的，这就导致了他们设计的应用中往往充斥了数据访问的相关错误却浑然不知。所以其实我还是比较乐意普及一些数据库常识的。&lt;/p&gt;

&lt;p&gt;本文就是我在 &lt;a href=&#34;https://about.segmentfault.com/?utm_source=sf-footer&amp;amp;utm_medium=footer-nav&amp;amp;utm_campaign=about&amp;amp;utm_content=about-index&amp;amp;utm_term=%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC&#34;&gt;&lt;em&gt;segmentfault.com&lt;/em&gt;&lt;/a&gt; 上对 &amp;ldquo;&lt;strong&gt;怎么理解SQL的四个事务隔离级别？&lt;/strong&gt;&amp;ldquo;&lt;a href=&#34;https://segmentfault.com/q/1010000012178278/a-1020000012661683&#34;&gt;这个问题的回答&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Ubuntu 16.04上从源码编译安装go1.9.2</title>
      <link>https://xiaowing.github.io/post/20171226_install_golang_fromsrc_ubuntu/</link>
      <pubDate>Fri, 22 Dec 2017 11:37:20 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20171226_install_golang_fromsrc_ubuntu/</guid>
      <description>&lt;p&gt;这两天在虚拟机上新装了一个 &lt;a href=&#34;http://releases.ubuntu.com/16.04/&#34;&gt;Ubuntu Server 16.04LTS&lt;/a&gt;,于是很自然地想安装一个Go语言环境。以往无论在Windows上还是在Linux上都是用的现成的二进制distribute包来安装Go, 但是这次打算尝试用源码来直接编译安装。于是把本次编译安装的一些手顺和注意事项分享在本文中:&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/20171226/ubuntu-go.png&#34;
        alt=&#34;Go on Ubuntu&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>揭秘PG —— 无处不在的OID</title>
      <link>https://xiaowing.github.io/post/20171117_pg_knowhow_oid/</link>
      <pubDate>Fri, 17 Nov 2017 23:08:31 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20171117_pg_knowhow_oid/</guid>
      <description>&lt;p&gt;由于手头当前的工作是基于PostgreSQL(以下简称&lt;strong&gt;PG&lt;/strong&gt;)做二次开发，因此目前对PG的源码也或多或少地读了一些，因此便想到了在博客里分享一些关于阅读PG源码所获得的KnowHow。&lt;/p&gt;

&lt;p&gt;在国内的PG技术圈内，提到PG源码解读自然首推武汉大学的两位彭老师所著的&lt;a href=&#34;https://book.douban.com/subject/6971366/&#34;&gt;《PostgreSQL数据库内核分析》&lt;/a&gt;。不过这本书的着眼点是对PG源码的整体架构，以及SQL引擎，存储系统，事务处理等等这些实现机制&amp;amp;算法的介绍，而我则主要想分享一些PG代码中的一些有意思的小细节/小功能。虽然只是PG那几百万行源码中的沧海一粟，不过从这些小细节中解读程序设计的匠心也是颇有意思的。&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/PostgreSQL_logo_120x120.png&#34;
        alt=&#34;PostgreSQL Logo&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;第一篇就从PG中无处不在的&lt;strong&gt;OID&lt;/strong&gt;开始吧&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译文]Python为何会成为机器学习领域的主流语言</title>
      <link>https://xiaowing.github.io/post/20170913_python_and_machine_learning_cn/</link>
      <pubDate>Wed, 13 Sep 2017 21:37:02 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20170913_python_and_machine_learning_cn/</guid>
      <description>&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/python-logo.png&#34;
        alt=&#34;Python Logo&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;最近因为在改PostgreSQL的相关的一些代码，因此在自学Perl语言。虽然和Python一样，它也是门解释型语言，然而这门语言真的是比较奇葩，因此无比地怀念Python.&lt;/p&gt;

&lt;p&gt;Python是我2015年自学的，虽然没用它做过什么正经的项目，但是小东西还是写了不少。只可惜自己终究还是修行不够，否则在目前这个被&amp;rdquo;人工智能&amp;rdquo;，“机器学习”等概念刷屏的年代，借助Python这门深受机器学习领域欢迎的语言，我说不定也能包装成一个年薪百万的大咖~&lt;/p&gt;

&lt;p&gt;不过，为什么机器学习领域会如此欢迎Python？之前在一个日文网站上看到一篇文章说这个事情，我觉得写得有点意思，所以就把它翻译了一下&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何为PostgreSQL创建一个内置函数？</title>
      <link>https://xiaowing.github.io/post/20170903_howto_create_a_postgres_builtin_function/</link>
      <pubDate>Sun, 03 Sep 2017 22:59:31 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20170903_howto_create_a_postgres_builtin_function/</guid>
      <description>&lt;p&gt;这篇文章我已经酝酿颇久了，诱因是因为&lt;a href=&#34;https://www.pingcap.com/index-zh&#34;&gt;PingCAP&lt;/a&gt;团队为了推广他们的&lt;strong&gt;TiDB&lt;/strong&gt;而在知乎专栏发了一篇文章《&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24870620&#34;&gt;TiDB 增加 MySQL 内建函数&lt;/a&gt;》。受此文启发，我在网上搜索了一下&lt;strong&gt;PostgreSQL&lt;/strong&gt;(&lt;em&gt;以下略称&amp;rdquo;PG&amp;rdquo;&lt;/em&gt;)中定制内置函数(&lt;em&gt;Built-in Function&lt;/em&gt;)相关的文章，果然没有搜到什么像样的中文文章。其实为PG添加内置函数并不难，可能是相对于hacking它的SQL引擎或者存储引擎等等话题而言，加一个内置函数的逼格实在是太Low吧。不过TiDB这个诞生还没多久的数据库产品都知道通过先利用内置函数这个话题来由简入深地吸引广大开发者为它贡献代码，PG作为一个诞生了已有20年的开源数据库老大哥却没有一篇像样文章，也难怪PG的普及率不高了。&lt;/p&gt;

&lt;p&gt;以上就作为这篇分享的「意味づけ」吧&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译文]GO语言是面向对象的吗？</title>
      <link>https://xiaowing.github.io/post/20170816_is_go_object_oriented_cn/</link>
      <pubDate>Wed, 16 Aug 2017 21:48:52 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20170816_is_go_object_oriented_cn/</guid>
      <description>&lt;p&gt;周一在微信上收到了&lt;a href=&#34;http://www.weixinyidu.com/a_277786&#34;&gt;Go中国&lt;/a&gt;公众号推送的一篇文章 &lt;a href=&#34;https://flaviocopes.com/golang-is-go-object-oriented/&#34;&gt;Is GO object oriented&lt;/a&gt; ,读完以后感觉观点还是很有意思的，与我的所见有很多相似之处，所以就饶有兴趣地把它翻译成中文，也算是作为&amp;rdquo;友军&amp;rdquo;的一点贡献吧&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>主线程等待子线程结束的各语言实现</title>
      <link>https://xiaowing.github.io/post/20170805_main_thread_sync_with_others/</link>
      <pubDate>Sat, 05 Aug 2017 22:18:06 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/20170805_main_thread_sync_with_others/</guid>
      <description>&lt;p&gt;在涉及到并发编程的情况下，经常性地会碰到一种场景:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;由一个线程开启了多个线程并发执行多个任务，之后由该线程(so called &amp;ldquo;主线程&amp;rdquo;)等待多个线程都结束后汇总结果.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这种场景下，主线程在其创建的子线程执行期间内需要阻塞，直到其他子线程都执行完毕。由于这类场景已经在不同语言的开发中遇到多次，所以汇总一下这些语言的常用实现方法，以后查起来也方便~&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言程序通过函数指针调用Go函数的方法</title>
      <link>https://xiaowing.github.io/post/howto_call_a_go_func_via_funcpoint_from_cside/</link>
      <pubDate>Sun, 30 Jul 2017 16:16:03 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/howto_call_a_go_func_via_funcpoint_from_cside/</guid>
      <description>&lt;p&gt;在github上关于cgo的wiki中，有一&lt;a href=&#34;https://github.com/golang/go/wiki/cgo#function-pointer-callbacks&#34;&gt;章节&lt;/a&gt;专门介绍了如何利用cgo技术通过函数指针调用Golang的函数实现. 不过，仔细观察这个章节的代码示例可以发现，它所要解决的其实是以下的场景:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在Golang中想要调用一个已有的C语言函数，但是该C语言函数要求一个函数指针作为参数时应该怎么办？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果将这个场景稍微改变一下，改成以下场景，对应的解法又该是什么？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在一个C语言实现的已有系统中，对于一个要求函数指针的函数，如何传入一个Golang实现的回调函数以实现“用Golang扩展C语言系统”的目的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我基于wiki中已有的代码简单探索了一下方法，结果分享如下：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一见如故的Go语言</title>
      <link>https://xiaowing.github.io/post/why_i_love_the_go_programming_language/</link>
      <pubDate>Sun, 30 Jul 2017 14:17:37 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/why_i_love_the_go_programming_language/</guid>
      <description>&lt;p&gt;从去年接触Go语言(以后简称&amp;rdquo;Golang&amp;rdquo;)到现在，已经有1年的时间了。感觉随着使用经验的积累，越发地喜爱这么编程语言。作为一个以C, C#语言出道，并自学了Java, Python, Golang的无证程序员，使用 了一段时间Go语言后，最明显的感觉就是：“这正式我所期盼的语言”。特别是写多了C语言代码，虽然感叹于C语言在语言上的简洁与性能上的高效，但是对于现实中C语言在开发方面的低效也总是吐槽不断。遭遇了Go语言之后，认为这门语言是C语言的最好传人(不要提C++)。&lt;/p&gt;



&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;pure-u-1-1&#34;&gt;
    &lt;div style=&#34;padding: 0 .2em&#34;&gt;
      &lt;img
        class=&#34;pure-img-responsive&#34;
        src=&#34;https://xiaowing.github.io/img/post/golang-gopher-100.jpg&#34;
        alt=&#34;Gopher&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;


&lt;p&gt;以下分享一些我认为Golang做的比较值得推崇的地方：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于...</title>
      <link>https://xiaowing.github.io/about/</link>
      <pubDate>Sun, 30 Jul 2017 11:23:41 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/about/</guid>
      <description>About me 自我介绍 Hello, 我叫 小wing, 又名 老滚的笼中鼠。是2005年从学校毕业出来的野生码农一枚。 虽然大学是正经的大学，讲来可算作科班毕业，但其实四年大学生活中没怎么正经学习过。后来自己开窍，学会了写代码，目前应该是我大学那个班上为数不多的还在靠写代码讨生活的人(此处不知是该喜还是悲&amp;hellip;)
过去十二年间，一直做的是略偏底层的开发，其中开发并维护一个自研数据库的数据库驱动占据了大半的职场生涯。应用项目也接触过一些，但所用技术非常混杂，不成体系。两年前跳出了舒适区, 开始混迹于新的行业，新的领域。目前仍以三十来岁的&amp;rdquo;高龄&amp;rdquo;在开发的道路上探索&amp;hellip;
我的标签 ☞ INTP星人☞爱猫家 ☞钝感男 ☞Google粉 ☞第70004号维基人
☞民主自由控 ☞反对爱国主义 ☞伪技术爱好者 ☞Gopher
☞无证程序员 ☞游戏宅 ☞摇滚乐拥趸 ☞原版CD收藏癖
关注的技术  C programming in Linux Go programming language Hacking PostgreSQL Database technologies, especially in NewSQL Microservice architecture &amp;amp; Serverless architecture (rookie level) Last but not least, I don&amp;rsquo;t like those who keep talking about Deep learning, A.I. blah blah blah  最爱安利的三张唱片  &amp;ldquo;Mellon Collie And The Infinite Sadness&amp;rdquo; &amp;ndash;The Smashing Pumpkins</description>
    </item>
    
    <item>
      <title>驿站新开</title>
      <link>https://xiaowing.github.io/post/new_beginning/</link>
      <pubDate>Sun, 30 Jul 2017 11:05:37 +0800</pubDate>
      
      <guid>https://xiaowing.github.io/post/new_beginning/</guid>
      <description>&lt;p&gt;之前曾经搞过一个博客，一度托管到&lt;a href=&#34;https://zh.wikipedia.org/wiki/Windows_Live_Spaces&#34;&gt;MSN Space&lt;/a&gt;上。后来这个产品被微软放弃后又把博客放在&lt;a href=&#34;https://zh.wikipedia.org/wiki/Blogger&#34;&gt;Blogspot&lt;/a&gt;上，但终究由于伟大的GFW的存在，所以后来就不了了之了。在不写博客的这些年，自己发生了很多事情：结婚了，有了两个孩子，前前后后买了三辆车等等，生活工作也越发繁忙起来。&lt;/p&gt;

&lt;p&gt;但是我终究是一个爱发表自己意见的人，虽然印象笔记上密密麻麻记了不少各种笔记，但是还是想找个渠道把自己的见解公开出来。所以还是打算重新开博。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>